@inject WindowDimension WindowsDimension

@if (PortPin is not null)
{
	<ModalPage @ref="linkingMenuModal" Width="@Width" @bind-IsVisible="isModalVisible">
		<DataLinkerPage IsModalVisible="HideModal" ReceivedPin="PortPin" ></DataLinkerPage>
	</ModalPage>

	<div class="card mt-3 @Style">
		<div class="card-header ">
			<div class="inline space-between">
				<a>Pin: @PortPin.Id - @Style</a>

				@if (PortPin.Favorite)
				{
					<img src="/img/favourite-check.png" class="btn-img" @onclick="() => ChangeFavouriteState()">
				}
				else
				{
					<img src="/img/favourite-uncheck.png" class="btn-img" @onclick="() => ChangeFavouriteState()">
				}
			</div>
		</div>
		<div class="card-body">
			<div class="space-between inline">
				<a>@Enum.GetName(typeof(PortPin.PinMode), PortPin.Mode) Mode | Value: "@PortPin.GetValueString()"</a>
				<button class="btn btn-primary round-button button-@Style" @onclick="() => OpenLinkingMenu()">
					<img src="img/link.png" class="round-btn-img" />
				</button>
			</div>
		</div>
	</div>
}

@code {
	[Parameter]
	public PortPin PortPin { get; set; } = new();

	private ModalPage linkingMenuModal;
	private bool isModalVisible;

	private string Style = string.Empty;

	private string Width = "960px";

	private void SetStyles()
	{
		Style = Enum.GetName(typeof(PortPin.ObjectValueType), PortPin.ValueType).ToLower();
	}

	private void ChangeFavouriteState()
	{
		IGeneralComponent component = PortPin.ParentComponent;
		if (!ClientManager.GetClientIndexById(component.ParentClient.Id, out int clientIndex)) return;
		if (!ClientManager.GetComponentIndexById(clientIndex, component.Id, out int componentIndex)) return;
		if (!ClientManager.GetBoardPinIndexById(clientIndex, componentIndex, PortPin.Id, out int pinIndex)) return;

		ClientManager.Clients[clientIndex].Components[componentIndex].ConnectedPins[pinIndex].Favorite = !PortPin.Favorite;
	}

	private void HideModal(bool value)
	{
		isModalVisible = value;
	}

	private void OpenLinkingMenu()
	{
		isModalVisible = true;
	}

	protected override async Task OnParametersSetAsync()
	{
		SetStyles();
		StateHasChanged();
	}
}
