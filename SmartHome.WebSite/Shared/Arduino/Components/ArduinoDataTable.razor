@inject IJSRuntime JsRuntime
@inject WindowDimension WindowsDimension

@if (_selectedClient.Components.Count > 0)
{
	<div class="row gutters-sm mt-3" role="list" style="margin-left: @Margin !important; margin-right: @Margin !important;">
		@for (int cols = 0; cols < Columns; cols++)
		{
			<div class="@ColumnClass column">
				@for (int rows = 0; rows < Rows; rows++)
				{
					int index = rows * Columns + cols;
					if (index >= _selectedClient.Components.Count)
						continue;

					var component = _selectedClient.Components[index];

					<ArduinoComponent Component="@component" Reference="@ClientElement[component.Id]"></ArduinoComponent>
				}
			</div>
		}
	</div>
}
else
{
	<div class="inline" style="margin-top: 20%">
		<img src="img/sticker/choose-client.png"/>
	</div>
}

@code {
	[Parameter]
	public string WrapperState { get; set; } = String.Empty;

	[Parameter]
	public ArduinoClient SelectedClient { get; set; } = new();

	[Parameter]
	public double WebWidth { get; set; } = 1980;

	private ArduinoClient _selectedClient { get; set; } = new();

	private Dictionary<int, ElementReference> ClientElement = new Dictionary<int, ElementReference>();
	private int Columns = 3;
	private int Rows = 0;

	public Random random = new Random();
	private string ColumnClass = "col-md-4";
	private string Margin = "0px";

	string[] RandomImages = new string[]
	{
		"https://wallpapercave.com/wp/wp2722942.jpg",
		"https://images.unsplash.com/photo-1512850183-6d7990f42385?ixlib=rb-4.0.3&ixid=MnwxMjA3fDB8MHxzZWFyY2h8M3x8dmVydGljYWwlMjB3YWxscGFwZXJ8ZW58MHx8MHx8&w=1000&q=80",
		"https://wallpaperaccess.com/full/1642272.jpg",
		"",
	};

	public void CreateTable(List<IGeneralComponent> components)
	{
		int elementsDivided = components.Count / Columns;
		Rows = components.Count % Columns == 0 ? elementsDivided : elementsDivided + 1;

		for (int rows = 0; rows < Rows; rows++)
		{
			for (int cols = 0; cols < Columns; cols++)
			{
				int index = rows * Columns + cols;
				if (index < components.Count)
				{
					ClientElement[components[index].Id] = new ElementReference();
				}
			}
		}
	}

	private void GetListDimmensions()
	{
		if (WrapperState == "toggled")
		{
			if (WebWidth < 890)
			{
				ColumnClass = "col-md-12";
				Columns = 1;
				Margin = $"{(int)(WebWidth - 440 * Columns) / 2}px";
			}
			else if (WebWidth < 1310)
			{
				ColumnClass = "col-md-6";
				Columns = 2;
				Margin = $"{(int)(WebWidth - 435 * Columns) / 2}px";
			}
			else if (WebWidth < 1735)
			{
				ColumnClass = "col-md-4";
				Columns = 3;
				Margin = $"{(int)(WebWidth - 430 * Columns) / 2}px";
			}
			else
			{
				ColumnClass = "col-md-3";
				Columns = 4;
				Margin = $"{(int)(WebWidth - 430 * Columns) / 2}px";
			}
		}
		else
		{
			if (WebWidth < 765)
			{
				ColumnClass = "col-md-12";
				Columns = 1;
				Margin = $"{(int)(WebWidth - 445) / 2}px";
			}
			else if (WebWidth < 1130)
			{
				ColumnClass = "col-md-12";
				Columns = 1;
				Margin = $"{(int)(WebWidth - 200 - 500 * Columns) / 2}px";
			}
			else if (WebWidth < 1580)
			{
				ColumnClass = "col-md-6";
				Columns = 2;
				Margin = $"{(int)(WebWidth - 575 * Columns) / 2}px";
			}
			else
			{
				ColumnClass = "col-md-4";
				Columns = 3;
				Margin = $"{(int)(WebWidth - 525 * Columns) / 2}px";
			}
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		GetListDimmensions();

		if (!ArduinoClient.IsNullOrEmpty(SelectedClient))
		{
			_selectedClient = SelectedClient;
			if (_selectedClient.Components.Count > 0)
				CreateTable(_selectedClient.Components);
			else
			{
				//TODO: Do some sht
			}
		}
		else
		{
			//TODO: Show some text template ~Client has no Data~
		}
		StateHasChanged();
	}
}
