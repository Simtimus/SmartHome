<div class="card main-card p-3" style="height: 315px">
	<div>
		<select id="client_id" class="form-select form-select-lg" @bind="ClientId">
			<option disabled selected value="@string.Empty">-</option>
			@foreach (ArduinoClient client in ClientManager.Clients)
			{
				<option value="@client.Id">
					<h5>@client.Name</h5>
				</option>
			}
		</select>
		<label>Client Name</label>
	</div>
	@if (Client is not null)
	{
		<div class="mt-3">
			<select class="form-select form-select-lg" @bind="ComponentId">
				<option disabled selected value="@string.Empty">-</option>
				@foreach (IGeneralComponent component in Client.Components)
				{
					<option value="@component.Id">
						<lable>@component.Id</lable>
					</option>
				}
			</select>
			<label>Component Id</label>
		</div>

	}
	@if (Component is not null)
	{
		<div class="mt-3">
			<select class="form-select form-select-lg" @bind="PortPinId">
				<option disabled value="@string.Empty">-</option>
				@foreach (PortPin portPin in Component.ConnectedPins)
				{
					<option value="@portPin.Id">
						<lable>@portPin.Id</lable>
						<lable>@Enum.GetName(typeof(PortPin.ObjectValueType), portPin.ValueType)</lable>
					</option>
				}
			</select>
			<label>Pin Id</label>
		</div>
	}
</div>

@code {
	[Parameter]
	public EventCallback<ElementAddress> OnPortPinReady { get; set; }

	[Parameter]
	public string ClientId 
	{ 
		get { return _selectedClient; }
		set
		{
			if (value != _selectedClient)
			{
				_selectedClient = value;
				ComponentId = string.Empty;
				PortPinId = string.Empty;

				Client = null;
				Component = null;

				GetClient();
			}
		} 
	}

	[Parameter]
	public string ComponentId
	{
		get { return _selectedComponent; }
		set
		{
			if (value != _selectedComponent)
			{
				_selectedComponent = value;
				PortPinId = string.Empty;
				Component = null;

				GetComponent();
			}
		}
	}

	[Parameter]
	public string PortPinId
	{
		get { return _selectedPortPin; }
		set
		{
			if (value != _selectedPortPin)
			{
				_selectedPortPin = value;

				GetPortPin();
			}
		}
	}

	private ArduinoClient Client;
	private IGeneralComponent Component;

	private string _selectedClient = string.Empty;
	private string _selectedComponent = string.Empty;
	private string _selectedPortPin = string.Empty;

	private void GetClient()
	{
		if (Guid.TryParse(_selectedClient, out Guid clientId))
		{
			Client = ClientManager.GetClientById(clientId);
		}
	}

	private void GetComponent()
	{
		if (ArduinoClient.IsNullOrEmpty(Client)) return;
		if (int.TryParse(_selectedComponent, out int componentId))
		{
			Component = ClientManager.GetComponentById(Client.Id, componentId);
		}
	}

	private void GetPortPin()
	{
		if (ArduinoClient.IsNullOrEmpty(Client)) return;
		if (Component is null) return;
		if (int.TryParse(_selectedComponent, out int componentId))
		{
			if (int.TryParse(_selectedPortPin, out int portPinId))
			{
				ElementAddress elementAddress = new()
				{
					ClientId = Client.Id,
					ComponentId = Component.Id,
					PortPinId = portPinId,
				};
				OnPortPinReady.InvokeAsync(elementAddress);
			}
		}
	}

	protected override async Task OnParametersSetAsync()
	{
		StateHasChanged();
	}
}
