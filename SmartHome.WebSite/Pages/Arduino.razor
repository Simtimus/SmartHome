@page "/arduino"
@implements IDisposable
@inject IJSRuntime JsRuntime
@inject SnackBar SnackBar
@inject WindowDimension WindowDimensions
@inject Server ArduinoServer
@inject GeneralComponent GenericComponent

<div class="d-flex @WrapperState" id="wrapper">
	<!-- Sidebar -->
	<ArduinoSidebar Clients="ClientManager.Clients" ClientClick="@OnClientClick"></ArduinoSidebar>
	<!-- /#sidebar-wrapper -->
	<!-- Page Content -->
	<div id="page-content-wrapper">
		<nav class="navbar navbar-expand-lg navbar-light border-bottom">
			<button class="btn btn-primary" id="menu-toggle" @onclick="ToggleWrapper">
				<img src="img/list-text.png" class="btn-img"/>
			</button>
			<a href="/">
				<button class="btn btn-primary">
					<img src="img/home.png" class="btn-img" />
				</button>
			</a>
			<a class="nav-link text-white">@ArduinoServer.IpHost : @Server.PortHost</a>
			<img src="img/ip-server.png" class="txt-img"/>
			@*Empty div is part of design*@
			<div class="collapse navbar-collapse"></div>
			<div><a>@WindowDimensions.Width</a></div>
			@if (activeTab == 1)
			{
				<button class="btn btn-primary" @onclick="ShowModal">
					<img src="img/add.png" class="btn-img" />
				</button>
				<button class="btn btn-primary"  @onclick="RunTest">Test</button>
			}
		</nav>

		<ul class="nav nav-tabs">
			<li class="nav-item">
				<button class="nav-link disabled" tabindex="-1" aria-disabled="true">Arduino Tabs:</button>
			</li>
			<li class="nav-item">
				<button class="nav-link @ComponentTabClass" @onclick="() => ActivateTab(0)">Components</button>
			</li>
			<li class="nav-item">
				<button class="nav-link @LogicBlocksTabClass" @onclick="() => ActivateTab(1)">Logic Nodes</button>
			</li>
			@*<li class="nav-item">
				<button class="nav-link @ProgramLogsTabClass" @onclick="() => ActivateTab(2)">Program Logs</button>
			</li>*@
		</ul>
		
		<div class="container-fluid">
			@if (activeTab == 0)
			{
				<ArduinoDataTable SelectedClient="@SelectedClient" WrapperState="@WrapperState" WebWidth="@WindowDimensions.Width" />
			}
			else if (activeTab == 1)
			{
				<NodesTable Nodes="NodeManager.Nodes" WrapperState="@WrapperState" WebWidth="WindowDimensions.Width"></NodesTable>
				@*<DataLinkTable DataLinks="DataLinker.DataLinks" WrapperState="@WrapperState" WebWidth="@WindowDimensions.Width" />*@
			}
			else if (activeTab == 2)
			{
				// Add logs
			}
		</div>
	</div>
	<!-- /#page-content-wrapper -->
</div>
<ModalPage @ref="ComponentCreatorModal" Width="@Width" @bind-IsVisible="isModalVisible">
	<SelectMenu IsModalVisible="SetModalVisibility"></SelectMenu>
</ModalPage>
<PageSnackBar SnackBarMessage="@SnackBar.Message"></PageSnackBar>

@code {
	private string WrapperState = String.Empty;
	private ArduinoClient SelectedClient { get; set; } = new();
	private int LastClientsCount = 0;


	int activeTab = 0;

	string ComponentTabClass => activeTab == 0 ? "active" : "";
	string LogicBlocksTabClass => activeTab == 1 ? "active" : "";
	string ProgramLogsTabClass => activeTab == 2 ? "active" : "";

	private ModalPage? ComponentCreatorModal;
	private bool isModalVisible;
	private string Width = "960px";

	private void ShowModal()
	{
		isModalVisible = true;
	}

	private void SetModalVisibility(bool value)
	{
		isModalVisible = value;
	}

	void ActivateTab(int tabName)
	{
		activeTab = tabName;
	}

	void ToggleWrapper()
	{
		if (WrapperState == String.Empty)
			WrapperState = "toggled";
		else
			WrapperState = String.Empty;
	}

	async Task RunTest()
	{
		await WindowDimensions.GetDimensions(JsRuntime);
	}

	private void OnClientClick(ArduinoClient client)
	{
		SelectedClient = client;
	}

	public void Dispose()
	{
		ClientEvents.OnClientChanged -= RefreshPage;
		ClientEvents.OnNewClientAddedd -= NewArduinoClientAdded;
	}

	private void NewArduinoClientAdded()
	{
		InvokeAsync(async () => { await SnackBar.ShowMessage("New Arduino board connected"); });
	}

	private void RefreshPage()
	{
		InvokeAsync(() => { StateHasChanged(); });
	}

	private async Task RefreshPageSize()
	{
		await Task.Delay(1000);
		while (true)
		{
			await WindowDimensions.GetDimensions(JsRuntime);
			StateHasChanged();
			await Task.Delay(500);
		}
	}

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
		{
			await RefreshPageSize();
		}
	}


	protected override async Task OnInitializedAsync()
	{
		ClientEvents.OnClientChanged += RefreshPage;
		ClientEvents.OnNewClientAddedd += NewArduinoClientAdded;
		Task.Run(() => RefreshPageSize());
		if (ClientManager.Clients.Count > 0)
		{
			//TODO: In case I want by default a Client to be selected
		}
	}
}